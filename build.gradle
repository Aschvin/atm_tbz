plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id "io.swagger.core.v3.swagger-gradle-plugin" version "2.0.9.1"
	id 'java'
	id 'war'
	id "org.flywaydb.flyway" version "5.1.4"
	// id "net.ltgt.apt" version "0.8"

	// SonarCloud
	id 'jacoco'
	id 'org.sonarqube' version '2.7.1'
}

group = "ch.nyp"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = 11

repositories {
	mavenCentral()
}

wrapper{
	gradleVersion = '5.6'
	distributionType = Wrapper.DistributionType.BIN
}

dependencies {
	// Spring Boot
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-web"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"

	// JWT
	implementation "io.jsonwebtoken:jjwt:0.9.1"

	// MapStruct
	implementation "org.mapstruct:mapstruct:1.3.0.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

	// Swagger
	implementation "io.springfox:springfox-swagger2:2.9.2"
	implementation "io.springfox:springfox-swagger-ui:2.9.2"
	implementation "io.springfox:springfox-bean-validators:2.9.2"

	// Flyway Version 6.0 available!
	implementation "org.flywaydb:flyway-core"

	// Jackson ObjectMapper (JSON)
	implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9.3"

	// JAXB (XML)
	implementation "javax.xml.bind:jaxb-api:2.4.0-b180725.0427"

	// PosgreSQL
	compile "org.postgresql:postgresql:42.2.6"

	// AssertJ
	testImplementation "org.assertj:assertj-core:3.13.2"

	// H2 Database Engine
	testImplementation "com.h2database:h2:1.4.199"

	// mockito
	testImplementation "org.mockito:mockito-core:3.0.0"
}

// SonarQube
sonarqube {
	properties {
		property 'sonar.projectKey', 'Tarkin25_noa'
	}
}

//Flyway Configuration
def props = new Properties()
file("src/main/resources/application.properties").withInputStream {
   props.load(it)
}

flyway {
    url = props["spring.datasource.url"]
    user = props["spring.datasource.username"]
    password = props["spring.datasource.password"]
	validateOnMigrate = true
	baselineOnMigrate = true

	//executes production sql sripts
	locations = ["filesystem:$project.projectDir/src/main/resources/db/migration/production"]
}

task flywayMigrateDev(dependsOn: flywayMigrate) {
	description "Migrates the schema to the latest version and inserts test data for the development."
	group "flyway"
}

task setMigrateDev() {
	doLast {
		flyway {
			url = props["spring.datasource.url"]
    		user = props["spring.datasource.username"]
    		password = props["spring.datasource.password"]
			validateOnMigrate = true
			baselineOnMigrate = true

			//executes production and development sql scripts
			locations = ["filesystem:$project.projectDir/src/main/resources/db/migration/production", "filesystem:$project.projectDir/src/main/resources/db/migration/development"]
		}
	}
}

flywayMigrateDev.dependsOn setMigrateDev
flywayMigrate.mustRunAfter setMigrateDev
