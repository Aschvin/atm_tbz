swagger: '2.0'
info:
  description: 'Description of Prototype Rest API'
  version: '1.0'
  title: 'Prototype Rest API'
  contact:
    name: 'Noser Young'
    email: 'zuerich@noseryoung.ch'
host: 'localhost:8080'
basePath: /
tags:
  - name: 'UserController'
    description: 'Endpoint for CRUD-Operations with Users'
paths:
  /users:
    get:
      tags:
        - UserController
      summary: 'Returns all Users'
      produces:
        - application/json
      responses:
        200:
          description:
            $ref: '#/status/200'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDTO'
        403:
          description:
            $ref: '#/status/403'
      deprecated: false
    post:
      tags:
        - UserController
      summary: 'Creates a new User'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          description: "The new User's data"
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        '201':
          description:
            $ref: '#/status/201'
          schema:
            $ref: '#/definitions/UserDTO'
        400:
          description:
            $ref: '#/status/400'
        '403':
          description:
            $ref: '#/status/403'
      deprecated: false
  '/users/{id}':
    get:
      tags:
        - UserController
      summary: 'Returns a single User with given ID'
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        200:
          description:
            $ref: '#/status/200'
          schema:
            $ref: '#/definitions/UserDTO'
        404:
          description:
            $ref: '#/status/404'
      deprecated: false
    put:
      tags:
        - UserController
      summary: 'Updates a User with given ID'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        200:
          description:
            $ref: '#/status/200'
          schema:
            $ref: '#/definitions/UserDTO'
        400:
          description:
            $ref: '#/status/400'
        403:
          description:
            $ref: '#/status/403'
        404:
          description:
            $ref: '#/status/404'
      deprecated: false
    delete:
      tags:
        - UserController
      summary: 'Deletes a User with given ID'
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: $int32
      responses:
        204:
          description:
            $ref: '#/status/204'
        403:
          description:
            $ref: '#/status/403'
        404:
          description:
            $ref: '#/status/404'
      deprecated: false

definitions:
  UserDTO:
    type: object
    required:
      - username
    properties:
      id:
        type: integer
        format: int64
        example: 1
      age:
        type: integer
        format: int32
        example: 18
      birthdate:
        type: string
        format: date
        example: '1999-01-05'
      email:
        type: string
        description:
          $ref: '#/constraints/email'
        example: 'john.doe@example.com'
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      password:
        type: string
        description:
          $ref: '#/constraints/password'
        example: '12345'
      username:
        type: string
        example: 'john.doe'
    title: UserDTO

#----------------------CONSTRAINTS-----------------------#
constraints:
  password: 'Must be at least 5 characters long'
  email: 'Must be a valid email address'
  not-empty: 'Cannot be empty'

#----------------------RESPONSE STATUS-------------------#
status:
  200: OK
  201: Created
  204: No Content
  400: Bad Request
  401: Unauthorized
  403: Forbidden
  404: Not Found
  500: Internal Server Error
